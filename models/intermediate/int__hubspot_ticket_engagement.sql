-- UPDATED: HubSpot Ticket Analysis with First 4-5 Engagements
-- Integrates engagement data directly into the main ticket analysis

WITH ticket_base AS (
  SELECT 
    -- Basic identifiers
    ticket_id,
    hubspot_object_id,
    ticket_number,
    
    -- Question 1: Generated by Coral Care vs. inbound
    last_email_type,
    is_outbound_ticket,
    object_source,
    object_source_label,
    
    -- Question 2: Urgency  
    ticket_priority,
    
    -- Question 4: Subject Line
    subject_line,
    email_subject,
    
    -- Question 6 & 8: Time to first response
    first_response_sla_status,
    time_to_first_response_hours,
    first_response_sla_timestamp,
    time_to_first_agent_reply,
    first_agent_reply_date,
    
    -- Question 7: Coral Care member who took care of ticket
    owner_id,
    team_id,
    assigned_team_ids,
    owner_assigned_date,
    
    -- Question 9: Time to ticket close
    time_to_close,
    time_to_close_hours,
    close_sla_timestamp,
    closed_date,
    last_closed_date,
    
    -- Question 10: SLA status
    first_response_sla,
    close_sla_status,
    next_response_sla_status,
    sla_rule_config_id,
    sla_schedule_id,
    
    -- Question 11: Support vs. Provider Pipeline
    pipeline,
    pipeline_stage,
    
    -- Additional useful fields
    ticket_category,
    in_helpdesk,
    visible_in_help_desk,
    num_conversations,
    num_companies,
    primary_company_id,
    primary_company_name,
    
    -- Timestamps
    created_date,
    last_modified_date,
    last_activity_date,
    last_contacted_date,
    
    -- Content and notes
    ticket_content,
    num_notes,
    num_times_contacted,
    
    -- Assignment and routing
    assignment_method,
    created_by,
    
    -- Email tracking
    last_email_date,
    last_email_id,
    sales_email_last_replied,
    
    -- Fivetran metadata
    fivetran_synced,
    is_deleted
    
  FROM {{ ref('stg__hubspot__ticket') }}
),

ticket_with_contact AS (
  SELECT 
    t.*,
    tc.{{ adapter.quote("CONTACT_ID") }} as contact_id,
    COUNT(tc.{{ adapter.quote("CONTACT_ID") }}) OVER (PARTITION BY t.ticket_id) AS num_contacts_on_ticket
  FROM ticket_base t
  LEFT JOIN {{ ref('stg__hubspot__ticket_contact') }} tc 
    ON t.ticket_id = tc.{{ adapter.quote("TICKET_ID") }}
),

-- NEW: Get all engagements related to tickets via ticket_engagement table
all_engagements AS (
  SELECT 
    te.{{ adapter.quote("TICKET_ID") }} as ticket_id,
    te.{{ adapter.quote("ENGAGEMENT_ID") }} as engagement_id,
    ee.{{ adapter.quote("PROPERTY_HS_TIMESTAMP") }} as engagement_timestamp,
    'EMAIL' AS engagement_type,
    ee.{{ adapter.quote("PROPERTY_HS_EMAIL_SUBJECT") }} as engagement_subject,
    COALESCE(
      ee.{{ adapter.quote("PROPERTY_HS_EMAIL_TEXT") }}, 
      ee.{{ adapter.quote("PROPERTY_HS_BODY_PREVIEW") }}
    ) as engagement_content,
    ee.{{ adapter.quote("PROPERTY_HS_EMAIL_DIRECTION") }} as engagement_direction,
    ee.{{ adapter.quote("PROPERTY_HUBSPOT_OWNER_ID") }} as engagement_owner_id,
    ee.{{ adapter.quote("PROPERTY_HS_CREATED_BY") }} as engagement_created_by
  FROM {{ ref('stg__hubspot__ticket_engagement') }} te
  JOIN {{ ref('stg__hubspot__engagement_email') }} ee ON te.{{ adapter.quote("ENGAGEMENT_ID") }} = ee.{{ adapter.quote("ENGAGEMENT_ID") }}
  WHERE ee.{{ adapter.quote("PROPERTY_HS_TIMESTAMP") }} IS NOT NULL
  
  UNION ALL
  
  SELECT 
    te.{{ adapter.quote("TICKET_ID") }} as ticket_id,
    te.{{ adapter.quote("ENGAGEMENT_ID") }} as engagement_id,
    ec.{{ adapter.quote("PROPERTY_HS_TIMESTAMP") }} as engagement_timestamp,
    'CALL' AS engagement_type,
    ec.{{ adapter.quote("PROPERTY_HS_CALL_TITLE") }} as engagement_subject,
    COALESCE(
      ec.{{ adapter.quote("PROPERTY_HS_CALL_BODY") }}, 
      ec.{{ adapter.quote("PROPERTY_HS_BODY_PREVIEW") }}
    ) as engagement_content,
    ec.{{ adapter.quote("PROPERTY_HS_CALL_DISPOSITION") }} as engagement_direction,
    ec.{{ adapter.quote("PROPERTY_HUBSPOT_OWNER_ID") }} as engagement_owner_id,
    ec.{{ adapter.quote("PROPERTY_HS_CREATED_BY") }} as engagement_created_by
  FROM {{ ref('stg__hubspot__ticket_engagement') }} te
  JOIN {{ ref('stg__hubspot__engagement_call') }} ec ON te.{{ adapter.quote("ENGAGEMENT_ID") }} = ec.{{ adapter.quote("ENGAGEMENT_ID") }}
  WHERE ec.{{ adapter.quote("PROPERTY_HS_TIMESTAMP") }} IS NOT NULL
),

ranked_engagements AS (
  SELECT 
    *,
    ROW_NUMBER() OVER (
      PARTITION BY ticket_id 
      ORDER BY engagement_timestamp ASC
    ) AS engagement_sequence,
    
    ROW_NUMBER() OVER (
      PARTITION BY ticket_id, engagement_type 
      ORDER BY engagement_timestamp ASC
    ) AS engagement_sequence_by_type
    
  FROM all_engagements
),

first_five_responses AS (
  SELECT 
    ticket_id,
    engagement_sequence,
    engagement_type,
    engagement_timestamp,
    engagement_subject,
    engagement_content,
    engagement_direction,
    engagement_owner_id,
    
    -- Create descriptive labels
    CASE 
      WHEN engagement_type = 'EMAIL' AND engagement_direction = 'INCOMING_EMAIL' 
        THEN 'Customer Email'
      WHEN engagement_type = 'EMAIL' AND engagement_direction = 'EMAIL' 
        THEN 'Agent Email'  
      WHEN engagement_type = 'CALL' 
        THEN 'Phone Call'
      ELSE engagement_type
    END AS engagement_label,
    
    -- Extract first 100 characters of content for summary
    LEFT(COALESCE(engagement_content, engagement_subject, ''), 100) AS content_preview
    
  FROM ranked_engagements
  WHERE engagement_sequence <= 5
),

-- Pivot the first 5 responses into columns
pivoted_responses AS (
  SELECT 
    ticket_id,
    
    -- First Response
    MAX(CASE WHEN engagement_sequence = 1 THEN engagement_label END) AS response_1_type,
    MAX(CASE WHEN engagement_sequence = 1 THEN engagement_timestamp END) AS response_1_timestamp,
    MAX(CASE WHEN engagement_sequence = 1 THEN content_preview END) AS response_1_content,
    MAX(CASE WHEN engagement_sequence = 1 THEN engagement_owner_id END) AS response_1_owner,
    
    -- Second Response  
    MAX(CASE WHEN engagement_sequence = 2 THEN engagement_label END) AS response_2_type,
    MAX(CASE WHEN engagement_sequence = 2 THEN engagement_timestamp END) AS response_2_timestamp,
    MAX(CASE WHEN engagement_sequence = 2 THEN content_preview END) AS response_2_content,
    MAX(CASE WHEN engagement_sequence = 2 THEN engagement_owner_id END) AS response_2_owner,
    
    -- Third Response
    MAX(CASE WHEN engagement_sequence = 3 THEN engagement_label END) AS response_3_type,
    MAX(CASE WHEN engagement_sequence = 3 THEN engagement_timestamp END) AS response_3_timestamp,
    MAX(CASE WHEN engagement_sequence = 3 THEN content_preview END) AS response_3_content,
    MAX(CASE WHEN engagement_sequence = 3 THEN engagement_owner_id END) AS response_3_owner,
    
    -- Fourth Response
    MAX(CASE WHEN engagement_sequence = 4 THEN engagement_label END) AS response_4_type,
    MAX(CASE WHEN engagement_sequence = 4 THEN engagement_timestamp END) AS response_4_timestamp,
    MAX(CASE WHEN engagement_sequence = 4 THEN content_preview END) AS response_4_content,
    MAX(CASE WHEN engagement_sequence = 4 THEN engagement_owner_id END) AS response_4_owner,
    
    -- Fifth Response
    MAX(CASE WHEN engagement_sequence = 5 THEN engagement_label END) AS response_5_type,
    MAX(CASE WHEN engagement_sequence = 5 THEN engagement_timestamp END) AS response_5_timestamp,
    MAX(CASE WHEN engagement_sequence = 5 THEN content_preview END) AS response_5_content,
    MAX(CASE WHEN engagement_sequence = 5 THEN engagement_owner_id END) AS response_5_owner,
    
    -- Summary metrics
    COUNT(*) AS total_first_five_engagements,
    COUNT(CASE WHEN engagement_type = 'EMAIL' THEN 1 END) AS email_count_in_first_five,
    COUNT(CASE WHEN engagement_type = 'CALL' THEN 1 END) AS call_count_in_first_five
    
  FROM first_five_responses
  GROUP BY ticket_id
),

final AS (
  SELECT 
    twc.*,
    
    -- Add engagement response data
    pr.response_1_type,
    pr.response_1_timestamp,
    pr.response_1_content,
    pr.response_1_owner,
    pr.response_2_type,
    pr.response_2_timestamp,
    pr.response_2_content,
    pr.response_2_owner,
    pr.response_3_type,
    pr.response_3_timestamp,
    pr.response_3_content,
    pr.response_3_owner,
    pr.response_4_type,
    pr.response_4_timestamp,
    pr.response_4_content,
    pr.response_4_owner,
    pr.response_5_type,
    pr.response_5_timestamp,
    pr.response_5_content,
    pr.response_5_owner,
    
    -- Engagement summary
    COALESCE(pr.total_first_five_engagements, 0) AS total_first_five_engagements,
    COALESCE(pr.email_count_in_first_five, 0) AS email_count_in_first_five,
    COALESCE(pr.call_count_in_first_five, 0) AS call_count_in_first_five,
    
    -- Original derived fields for analysis
    CASE 
      WHEN twc.last_email_type = 'AUTOMATED_EMAIL' THEN 'Coral Care Generated'
      WHEN twc.last_email_type IN ('REGULAR_EMAIL', 'REPLY') THEN 'Inbound'
      WHEN twc.is_outbound_ticket = TRUE THEN 'Coral Care Generated'
      ELSE 'Unknown'
    END AS ticket_origin_type,
    
    CASE 
      WHEN twc.ticket_priority = 'HIGH' THEN 'High'
      WHEN twc.ticket_priority = 'MEDIUM' THEN 'Medium' 
      WHEN twc.ticket_priority = 'LOW' THEN 'Low'
      ELSE 'Not Set'
    END AS priority_clean,
    
    CASE 
      WHEN twc.pipeline ILIKE '%support%' THEN 'Support'
      WHEN twc.pipeline ILIKE '%provider%' THEN 'Provider'
      ELSE 'Other'
    END AS pipeline_type,
    
    -- Time calculations (convert milliseconds to hours if needed)
    CASE 
      WHEN twc.time_to_first_response_hours IS NOT NULL 
      THEN twc.time_to_first_response_hours / 60.0 -- Convert minutes to hours
      WHEN twc.time_to_first_agent_reply IS NOT NULL 
      THEN twc.time_to_first_agent_reply / (1000 * 60 * 60.0) -- Convert ms to hours
      ELSE NULL
    END AS first_response_time_hours,
    
    CASE 
      WHEN twc.time_to_close_hours IS NOT NULL 
      THEN twc.time_to_close_hours / 60.0 -- Convert minutes to hours  
      WHEN twc.time_to_close IS NOT NULL 
      THEN twc.time_to_close / (1000 * 60 * 60.0) -- Convert ms to hours
      ELSE NULL
    END AS time_to_close_hours_calc,
    
    -- Ticket status
    CASE 
      WHEN twc.closed_date IS NOT NULL THEN 'Closed'
      ELSE 'Open'
    END AS ticket_status

  FROM ticket_with_contact twc
  LEFT JOIN pivoted_responses pr ON twc.ticket_id = pr.ticket_id
)

SELECT * FROM final